OMERO.tables
============

The OMERO.tables API unifies the storage of columnar data from various sources,
such as automated analysis results or script-based processing, and makes them
available within OMERO.

Large and small volumes of tabular data can be stored via named columns, and
retrieved in bulk or via paging. A limited query language provides basic
filtering and selecting.

For installation instructions, see :doc:`/sysadmins/server-tables`


The interface
-------------

The :source:`slice definition file <components/blitz/resources/omero/Tables.ice>`
for the OMERO.tables API primarily defines two service interfaces and a type
hierarchy:

.. glossary::


   ``omero.grid.Table``
        is the central service for dealing with tabular data.

   ``omero.grid.Tables``
        is an internal service used for managing table
        services, and can be ignored for almost all purposes.

   ``omero.grid.Column``
        is the base class for a number of column types
        which permit returning arrays of columnar values
        (_Ice doesn't provide an ``Any`` type, so it's
        necessary to group values of the same type.)

Single value columns
^^^^^^^^^^^^^^^^^^^^

These columns store a single value in each row.

.. glossary::

   ``omero.grid.FileColumn``
   ``omero.grid.ImageColumn``
   ``omero.grid.RoiColumn``
   ``omero.grid.WellColumn``
   ``omero.grid.PlateColumn``
        are id-based columns which reference ``omero.model.File``, ``Image``,
	``Roi``, ``Well`` and ``Plate`` instances respectively.

   ``omero.grid.BoolColumn``
        is a value column with boolean (non-null) values.

   ``omero.grid.LongColumn``
        is a value column with long (non-null, 64-bit) values.

   ``omero.grid.DoubleColumn``
        is a value column with double (non-null, 64-bit) values.

Parameters: (name, description, [values])
"""""""""""""""""""""""""""""""""""""""""

All column types take at least two parameters:

.. glossary::

    ``name``
        The name of the column which must be unique amongst columns in a table.

    ``description``
        The column description, which may be empty.

    ``values``
        Optionally a list of values can be used to initialise a column. All
        columns in a table must have the same number of rows.


Array value columns
^^^^^^^^^^^^^^^^^^^

These columns store a fixed width array in each row.

.. glossary::

   ``omero.grid.StringColumn``
        is a value column which holds strings with a maximum length defined at
        initialisation.

   ``omero.grid.DoubleArrayColumn``
        is a value column with fixed width arrays of long values.

   ``omero.grid.LongArrayColumn``
        is a value column with fixed width arrays of double values.

Parameters: (name, description, size, [values])
"""""""""""""""""""""""""""""""""""""""""""""""

.. glossary::

    ``size``
        The size of the arrays in a column, must be greater than 0.

    ``values``
        Optionally a list of lists of values can be used to initialise a
        column.


.. warning::
        The OMERO.Tables service currently does limited validation of string
        and array lengths. When adding or modifying it is essential that the
        `size` parameter of a column matches that of the underlying table.


You many find the :ref:`Python <python_omero_tables_code_samples>` and
:ref:`Java <java_omero_tables_code_samples>` annotated code samples helpful,
in addition to the :ref:`examples <tables-examples>` and
:jenkins:`documentation on the API
<job/OMERO/javadoc/slice2html/omero/grid/Table.html#Table>`.
These are only an introduction to using OMERO.tables and do not show its full
potential, see :ref:`tables-going-forward` for some inspiration.



.. _tables-examples:

Examples
--------

-  Hello World:
   :source:`examples/OmeroTables/first.py <examples/OmeroTables/first.py>`
-  Creating a Measurement Table:
   :source:`examples/OmeroTables/MeasurementTable.java <examples/OmeroTables/MeasurementTable.java>`
-  Querying a Table:
   :source:`examples/OmeroTables/FindMeasurements.java <examples/OmeroTables/FindMeasurements.java>`


The implementation
------------------

Currently, each table is backed by a single HDF table. Since PyTables
(and HDF in the general case) don't support concurrent access, OMERO.tables 
provides a global locking mechanism which permits multiple views of the same 
data. Each `OMERO.tables` file (registered as an ``OriginalFile`` in the
database), is composed of a single HDF table with any number of certain 
limited column types.

The query language mentioned above is *currently* the PyTables
`condition syntax <http://pytables.github.com/usersguide/condition_syntax.html>`_.
Columns are referenced by name. The following operators are supported:

-  Logical operators: ``&, |, ~``
-  Comparison operators: ``<, <=, ==, !=, >=, >``
-  Unary arithmetic operators: ``-``
-  Binary arithmetic operators: ``+, -, *, /, **, %``

and the following functions:

-  ``where(bool, number1, number2)``: number — number1 if the bool
   condition is true, number2 otherwise.
-  ``{sin,cos,tan}(float|complex)``: float\|complex — trigonometric
   sine, cosine or tangent.
-  ``{arcsin,arccos,arctan}(float|complex)``: float\|complex —
   trigonometric inverse sine, cosine or tangent.
-  ``arctan2(float1, float2)``: float — trigonometric inverse tangent of
   float1/float2.
-  ``{sinh,cosh,tanh}(float|complex)``: float\|complex — hyperbolic
   sine, cosine or tangent.
-  ``{arcsinh,arccosh,arctanh}(float|complex)``: float\|complex —
   hyperbolic inverse sine, cosine or tangent.
-  ``{log,log10,log1p}(float|complex)``: float\|complex — natural,
   base-10 and log(1+x) logarithms.
-  ``{exp,expm1}(float|complex)``: float\|complex — exponential and
   exponential minus one.
-  ``sqrt(float|complex)``: float\|complex — square root.
-  ``{real,imag}(complex)``: float — real or imaginary part of complex.
-  ``complex(float, float)``: complex — complex from real and imaginary
   parts.


.. _tables-going-forward:

Going forward
-------------

The Tables API itself provides little more than a remotely accessible
store, think of it as a server for Excel-like spreadsheets. We are
currently looking into the facilities that can be built on top of it,
and are **very** open to suggestions. For example, the
:jenkins:`IRoi interface <job/OMERO/javadoc/slice2html/omero/api/IRoi.html#IRoi>`
has been extended to filter ROIs by a given
measurement. This allows seeing only those results from a particular
analysis run. The following example shows how to set up such a
measurement and retrieve its results:

:source:`iroi.py <examples/OmeroTables/iroi.py>`

For an example of production code that parses out such measurements,
see :source:`populate_roi.py <components/tools/OmeroPy/src/omero/util/populate_roi.py>`.

The `IRoi` interface has been integrated into OMERO.insight, allowing for
the visualization and export of OMERO.tables:

.. figure:: /images/MeasurementListSep09.png
    :align: center
    :alt: Choice between multiple measurements

    Choice between multiple measurements

We are also looking into a NoSQL-style storage mechanism for OMERO, either as
an alternative back-end to OMERO.tables or as an additional key-value type
store. Any suggestions or ideas would be
:doc:`very welcome </users/community-resources>`.



.. seealso::

    `PyTables <http://pytables.org>`_
        Software on which OMERO.tables is built.

    `Condition Syntax <http://pytables.github.com/usersguide/condition_syntax.html>`_
        The PyTables condition syntax.

    :source:`Tables.ice <components/blitz/resources/omero/Tables.ice>`
        The API definition for OMERO.tables

    :source:`The Tables test suite <components/tools/OmeroPy/test/tablestest/>`
        The testsuite for OMERO.tables

    :doc:`/sysadmins/server-tables`
        Installation requirements for install OMERO.tables




